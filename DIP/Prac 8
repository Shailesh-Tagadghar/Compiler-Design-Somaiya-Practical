Practical 8 :
Implement LZW Compression

# LZW
from PIL import Image
import numpy as np

# def lzw_compress(data):
#     dict = {chr(i): i for i in range(256)}
#     result = []
#     w = ""
#     for c in data:
#         wc = w + c
#         if wc in dict:
#             w = wc
#         else:
#             result.append(dict[w])
#             dict[wc] = len(dict)
#             w = c

#     if w:
#         result.append(dict[w])
#     return result

# input = "ABABABABABABABABA"

# # Compress using LZW Compression
# compressed_data = lzw_compress(input)

# # Compute
# original_size = len(input)
# compressed_size = len(compressed_data)
# compression_ratio = compressed_size / original_size

# redundant_data = original_size - compressed_size

# print("Input Data: ", input)
# print("Compressed Data: ", compressed_data)
# print("Original Size: ", original_size, "bytes")
# print("Compressed Size: ", compressed_size, "bytes")
# print("Compression Ratio: ", compression_ratio)
# print("Redundancy Ratio: ", 1 - compression_ratio)
# print("Redundant Data: ", redundant_data, "bytes")

###########################################################################

def lzw_compress(input_sequence):
    dict_size = 256
    dict = {chr(i): i for i in range(dict_size)}
    compressed_data = []
    w = ""

    for symbol in input_sequence:
        ws = w + symbol
        if ws in dict:
            w = ws
        else:
            compressed_data.append(dict[w])
            dict[ws] = dict_size
            dict_size += 1
            w = symbol

    if w:
        compressed_data.append(dict[w])

    return compressed_data

def imagetolzw(image):
    img = Image.open(image).convert('L')

    pixels = list(img.getdata())
    pixel_sequence = ''.join([chr(pixel) for pixel in pixels])

    compressed_data = lzw_compress(pixel_sequence)

    return compressed_data

# Example
image = '/Images/nature.bmp'
compressed_data = imagetolzw(image)
print(f"Compressed Data Size: {len(compressed_data)} elements")
