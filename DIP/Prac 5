Practical 5 : 
Perform the following:
1.Erosion
2.Dilation
3.Opening and Closing
4.Skeletonization
5.Covex Hull
6.White and Black Top-Hats
7.Boundary Extraction

import matplotlib.pylab as pylab
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image, ImageEnhance, ImageFilter, ImageOps
from scipy import misc, ndimage, signal
from skimage import (color, data, exposure, feature, filters, img_as_float,
                     img_as_ubyte, io)
from skimage.color import rgb2gray
from skimage.exposure import cumulative_distribution
from skimage.filters import laplace
from skimage.io import imread
from skimage.morphology import (binary_closing, binary_dilation,
                                binary_erosion, binary_opening,
                                convex_hull_image, disk, rectangle,
                                skeletonize)
from skimage.restoration import (denoise_bilateral, denoise_nl_means,
                                 estimate_sigma)
from skimage.util import random_noise

def plot_image(image, title=""):
    pylab.title(title, size=20), pylab.imshow(image)
    pylab.axis("off")


# Erosion
im = rgb2gray(imread("image.jpeg"))
im[im <= 0.5] = 0 # Create binary image with fixed threshold 0.5
im[im > 0.5] = 1
pylab.figure(figsize=(20, 20))
pylab.subplot(1,3,1), plot_image(im, 'Original')
im1 = binary_erosion(im, rectangle(1,5))
pylab.subplot (1,3,2), plot_image(im1, 'Erosion with rectangle size (1,5)')
im1 = binary_erosion(im, rectangle(1,15))
pylab.subplot(1,3,3), plot_image(im1, 'Erosion with rectangle size (1,15)')
pylab.show()


# Dilation

im = img_as_float(imread("image.jpeg"))
im = 1 - im[..., 2]
im[im <= 0.5] = 0
im[im > 0.5] = 1
pylab.gray()
pylab.figure(figsize=(18, 9))
pylab.subplot(131)
pylab.imshow(im)
pylab.title("original", size=20)
pylab.axis("off")
for d in range(1, 3):
    pylab.subplot(1, 3, d + 1)
    im1 = binary_dilation(im, disk(2 * d))
    pylab.imshow(im1)
    pylab.title("Dilated image" + str(2 * d), size=20)
    pylab.axis("off")
pylab.show()

# Opening and Closing

im=rgb2gray(imread("image.jpeg"))
im[im<=0.5]=0
im[im>0.5]=1
pylab.gray()
pylab.figure(figsize=(20,14))
pylab.subplot(1,3,1), plot_image(im, 'Opening')
im1 = binary_opening(im, disk(5))
pylab.subplot(1,3,2), plot_image(im1, 'Opening with disk ='+str(5))
im1 = binary_closing(im, disk(3))
pylab.subplot(1,3,3), plot_image(im1, 'Closing with disk ='+str(3))

# Skeletonization

def plot_images_horizontally(original, filtered, filter_name, sz=(18,7)):
    pylab.gray()
    pylab.figure(figsize =sz)
    pylab.subplot(1,2,1), plot_image(original, 'Original')
    pylab.subplot(1,2,2), plot_image(filtered, filter_name)
    pylab.show()

im = img_as_float(imread('image.jpeg')[...,2])
threshold =0.5
im[im<=threshold]=0
im[im>threshold]=1
skeleton=skeletonize(im)
plot_images_horizontally(im, skeleton, 'skeleton', sz=(18,9))

# Convex Hull

from skimage.morphology import convex_hull_image

im=rgb2gray(imread('image.jpeg'))
threshold=0.5
im[im<=threshold]=0
im[im>threshold]=1
con_hull=convex_hull_image(im)
plot_images_horizontally(im ,con_hull,'convex hull', sz=(18,9))

# White-Hat, Black-Hat

from skimage.morphology import white_tophat, black_tophat,square

im = imread('image.jpeg')[...,2]
threshold=0.5
im[im<=threshold]=0
im[im>threshold]=1
im1=white_tophat(im,square(10))
im2=black_tophat(im,square(10))
pylab.figure(figsize=(20,15))
pylab.subplot(1,2,1), plot_image(im1, 'White Top-hat')
pylab.subplot(1,2,2), plot_image(im2, 'Black Top-hat')
pylab.show()

# Boundary Extraction

from skimage.morphology import binary_erosion

im=rgb2gray(imread('image.jpeg'))
threshold=0.5
im[im<=threshold]=0
im[im>threshold]=1
boundary=im-binary_erosion(im)
plot_images_horizontally(im,boundary,'boundary',sz=(18,9))
