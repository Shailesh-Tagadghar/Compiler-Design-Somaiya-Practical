Practical 3 :

Perform the following: 
1.	Derivatives and Gradients 
2.	Laplacian Filter 
3.	Sharpening with Laplacian Plot 
4.	Unsharp Masking 
5.	Image Negatives 



import matplotlib.pylab as pylab
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image, ImageEnhance, ImageFilter, ImageOps
from scipy import misc, ndimage, signal
from skimage.color import rgb2gray
from skimage.filters import laplace
from skimage.io import imread
from skimage import (color, data, exposure, feature, filters, img_as_float,
                     img_as_ubyte, io)

def plot_image(image, title=""):
    pylab.title(title, size=20), pylab.imshow(image)
    pylab.axis("off")

# Derivatives and Gradients
ker_x = [[-1, 1]]
ker_y = [[-1], [1]]

im = rgb2gray(imread("image.jpeg"))
im_x = signal.convolve2d(im, ker_x, mode="same")
im_y = signal.convolve2d(im, ker_y, mode="same")

im_mag = np.sqrt(im_x**2 + im_y**2)
im_dir = np.arctan(im_y / im_x)

pylab.gray()
pylab.figure(figsize=(30, 20))
pylab.subplot(231), plot_image(im, "Original")
pylab.subplot(232), plot_image(im_x, "Grad_x")
pylab.subplot(233), plot_image(im_y, "Grad_y")
pylab.subplot(234), plot_image(im_mag, "||grad||")
pylab.subplot(235), plot_image(im_dir, r"$\theta$")
pylab.plot(range(im.shape[1]), im[0, :], "b-", label=r"$f(x,y)|_{x=0}$", linewidth=5)
pylab.plot(range(im.shape[1]), im_x[0, :], "r-", label=r"$grad_x (f(x,y))|_{x=0}$")
pylab.title(r"$grad_x (f(x, y))|_{x=0}$", size=30)
pylab.legend(prop={"size": 20})
pylab.show()


# Laplacian Filter
ker_laplacian = [[0, -1, 0], [-1, 4, -1], [0, -1, 0]]
im = rgb2gray(imread("image.jpeg"))
im1 = np.clip(signal.convolve2d(im, ker_laplacian, mode="same"), 0, 1)
pylab.gray()
pylab.figure(figsize=(20, 10))
pylab.subplot(121), plot_image(im, "Original")
pylab.subplot(122), plot_image(im1, "Laplacian Convolved Image")
pylab.show()

# Sharpening With laplacian plot
im = rgb2gray(imread("image.jpeg"))
im1 = np.clip(laplace(im) + im, 0, 1)
pylab.figure(figsize=(10, 15))
pylab.subplot(121), plot_image(im, "Original Image")
pylab.subplot(122), plot_image(im1, "Sharpened Image with Laplace")
pylab.tight_layout()
pylab.show()


# Unsharp Masking
def rgb2gray(im):
    return np.clip(
        0.2989 * im[..., 0] + 0.5870 * im[..., 1] + 0.1140 * im[..., 2], 0, 1
    )


im = rgb2gray(img_as_float(imread("image.jpeg")))
im_blurred = ndimage.gaussian_filter(im, 3)
im_detail = np.clip(im - im_blurred, 0, 1)

pylab.gray()

fig, axes = pylab.subplots(nrows=2, ncols=3, sharex=True, sharey=True, figsize=(15, 15))
axes = axes.ravel()
axes[0].set_title("Original Image", size=15), axes[0].imshow(im)
axes[1].set_title("Blurred Image", size=15), axes[1].imshow(im_blurred)
axes[2].set_title("Sharpened Image", size=15), axes[2].imshow(im_detail)

alpha = [1, 5, 10]
for i in range(3):
    im_sharp = np.clip(im + alpha[i] * im_detail, 0, 1)
    axes[3 + i].imshow(im_sharp), axes[3 + i].set_title(
        "Sharpened Image, alpha=" + str(alpha[i]), size=15
    )

for ax in axes:
    ax.axis("off")

fig.tight_layout()
pylab.show()

# Image Negative


def compute_negative(image_path):
    original_image =  Image.open(image_path)
    original_array = np.array(original_image)
    negative_array = 255-original_array
    negative_image = Image.fromarray(negative_array)
    return original_image, negative_image

def display_images(original_image, negative_image):
    #Display the original and negative images side by side
    fig, axes = plt.subplots(1,2, figsize=(10,5))

    axes[0].imshow(original_image)
    axes[0].set_title("Original Image")

    axes[1].imshow(negative_image)
    axes[1].set_title("Negative Image")

    for ax in axes:
        ax.axis('off')
    plt.show()

if __name__=="__main__":
    image_path ="image.jpeg"
    original, negative = compute_negative(image_path)
    display_images(original, negative)
