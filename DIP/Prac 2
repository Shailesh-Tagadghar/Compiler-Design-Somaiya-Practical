Practical 2 : Implement Simple and Adaptive Histogram Equalization 

import os

import matplotlib.pylab as pylab
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image, ImageEnhance, ImageFilter, ImageOps
from scipy import misc
from scipy import ndimage as ndi
from scipy import signal as signal
from skimage import (color, data, exposure, feature, filters, img_as_float,
                     img_as_ubyte, io)
from skimage.color import rgb2gray
from skimage.exposure import cumulative_distribution
from skimage.filters import laplace
from skimage.io import imread
from skimage.morphology import (binary_closing, binary_dilation,
                                binary_erosion, binary_opening,
                                convex_hull_image, disk, rectangle,
                                skeletonize)
from skimage.restoration import (denoise_bilateral, denoise_nl_means,
                                 estimate_sigma)
from skimage.util import random_noise


def plot_image(image, title=""):
    pylab.title(title, size=20), pylab.imshow(image)
    pylab.axis("off")


def plot_hist(r, g, b, title=""):
    r, g, b = img_as_ubyte(r), img_as_ubyte(g), img_as_ubyte(b)
    pylab.hist(np.array(r).ravel(), bins=256, range=(0, 256), color="r", alpha=0.8)
    pylab.hist(np.array(g).ravel(), bins=256, range=(0, 256), color="g", alpha=0.5)
    pylab.hist(np.array(b).ravel(), bins=256, range=(0, 256), color="b", alpha=0.5)
    pylab.xlabel("Pixel Values", size=20),
    pylab.ylabel("Frequency", size=20)
    pylab.title(title, size=20)

# Histogram Equalization (Simple and Adaptive)
img = rgb2gray(imread("image.jpeg"))

# Histogram Equalization
img_eq = exposure.equalize_hist(img)

# Adaptive Histogram Equalization
img_adapteq = exposure.equalize_adapthist(img, clip_limit=0.03)
pylab.gray()
images = [img, img_eq, img_adapteq]

titles = ["original input", "After Hist Equalization", "After Adap Hist Equalization"]
for i in range(3):
    pylab.figure(figsize=(20, 10))
    plot_image(images[i], titles[i])

pylab.figure(figsize=(15, 5))

for i in range(3):
    pylab.subplot(1, 3, i + 1)
    pylab.hist(images[i].ravel(), color="g"), pylab.title(titles[i], size=15)

pylab.show()
