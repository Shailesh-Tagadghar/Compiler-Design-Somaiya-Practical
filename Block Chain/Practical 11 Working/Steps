Practical 11:

Steps: 

1. Add Metamask Extension to chrome
2. Create an account OR connect existing.
3. Download and Install Ganache -- https://archive.trufflesuite.com/ganache/
4. Open Ganache -- Create new Workspace
5. Open Metamask -- Click on Network name -- Add network -- Manual Netwoork
6. Enter details for manual network -- 
    Network Name -- Ganache
    New RPC URL -- open Ganache to get this URL
    Chain ID -- 1337
    Currency Symbol -- ETH
7. Click on Save
8. Open Ganache Click on any key symbol below -- copy private key
9. Open Metamask -- click on Account -- Add new account -- Import Account -- Paste private key here.
10. in network select -- test network -- Ganache
///////////////////////////cmd//////////////////////////////
11. Install necessary packages -- npm install -g truffle / npm install -g ganache / npm install lite-server --dev
12. Create new folder in VS CODE -- Open this folder -- Terminal (cmd) -- type cmd -- truffle init

13. In contract folder add new code -- Addition.sol 

//////////////////////////////////////////
Addition.sol
Code : 

// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;
contract Addition {
function add(uint256 a, uint256 b) public pure returns (uint256) {
return a + b;
}
}
//////////////////////////////////////////////

14. create new folder -- frontend  -- create two files -- app.js and index.html
/////////////////////////////////////////////////////
index.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>DApp-1</title>
</head>
<body>
<h1>Blockchain Addition DApp</h1>
<input type="number" id="num1" placeholder="Enter first number">
<input type="number" id="num2" placeholder="Enter second number">
<button onclick="addNumber()">Add Numbers</button>
<h3>Result: <span id="result"></span></h3>
<script
src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
<script src="app.js"></script>
</body>
</html>
//////////////////////////////////////////////////////////
app.js
const contractAddress = ""; // Replace with your deployed contract address
const contractABI = []; // Use ABI from compiled contract
let web3;
let contract;
window.addEventListener("load", async () => {
  if (window.ethereum) {
    web3 = new Web3(window.ethereum);
    await window.ethereum.enable();
  } else {
    console.log("MetaMask not detected. Please install MetaMask.");
  }
  contract = new web3.eth.Contract(contractABI, contractAddress);
});
async function addNumber() {
  const num1 = document.getElementById("num1").value;
  const num2 = document.getElementById("num2").value;
  const accounts = await web3.eth.getAccounts();
  console.log(num1);
  console.log(num2);
  contract.methods
    .add(num1, num2)
    .call({ from: accounts[0] })
    .then((result) => {
      console.log(result);
      document.getElementById("result").innerText = `${result}`;
    });
}


////////////////////////////////////////////////////////////////

15. Migration Folder -- create file -- 
1_deploy.js
const Addition = artifacts.require("Addition");
module.exports = async function (deployer) {
await deployer.deploy(Addition);
const instance = await Addition.deployed();
console.log("Addition deployed at:", instance.address);
};
///////////////////////////////////////////////////////

16. Test folder -- create file --
test.js
const Addition = artifacts.require("Addition");
contract("Addition", () => {
  it("should add two numbers correctly", async () => {
    const addition = await Addition.deployed();
    console.log("Contract Address: ", addition.address);
    const result = await addition.add(5, 3);
    assert.equal(result.toNumber(), 8, "Addition of 5 and 3 should be 8");
  });
});
////////////////////////////////////////////////////////////

17. create new file into root directory
bs-config.json
{
"server":{
"baseDir": ["./frontend"]
}
}
/////////////////////////////////////////////////////

18. in truffle-config.js
module.exports = {
  networks: {
    development: {
      host: "127.0.0.1",
      port: 7545,
      network_id: "5777",
    },
  },
  // Configure your compilers
  compilers: {
    solc: {
      version: "0.8.19",
    },
  },
};
///////////////////////////////////////////////////////

19. in package.json -- check this code

{
  "dependencies": {
    "lite-server": "^2.6.1"
  },
  "scripts": {
    "start": "lite-server"
  }
}

///////////////////////////////////////////////////

20. in cmd -- type -- truffle compile
21. it will create Build folder -- opeb Addition.json -- look for abi -- copy its array form inputs
22. Open app.js
paste abi -- code into -- CINTRACTabi
23. in cmd -- type -- truffle migrate
24. copy Contract Address -- paste into app.js -- contractAddress = ""
25. in cmd -- type -- truffle test
26. in cmd -- type -- npm start
27. it will open an page to perform addition. -- first give permission to metamask.

/////////////////////////////////////////////////////

28. to add new operations like sub,mul,div into this code
29. create new file 
Operations.sol

// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;
contract Operations {
function add(uint256 a, uint256 b) public pure returns (uint256) {
return a + b;
}
function sub(uint256 a, uint256 b) public pure returns (uint256) {
return a - b;
}
function mul(uint256 a, uint256 b) public pure returns (uint256) {
return a * b;
}
function div(uint256 a, uint256 b) public pure returns (uint256) {
return a / b;
}

}
//////////////////////////////////////////////////////////////////

30. update 
index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DApp-1</title>
  </head>
  <body>
    <h1>Blockchain Addition DApp</h1>
    Number 1:
    <input type="number" id="num1" placeholder="Enter first number" />
    <br /><br />
    Number 2:
    <input type="number" id="num2" placeholder="Enter second number" />
    <br />
    <h2>Choose Operation:</h2>
    <button onclick="addNumber()">Add</button>
    <button onclick="subNumber()">Sub</button>
    <button onclick="mulNumber()">Mul</button>
    <button onclick="divNumber()">Div</button>
    <h2>Result:</h2>
    <h3>Addition: <span id="resultA"></span></h3>
    <h3>Subtraction: <span id="resultS"></span></h3>
    <h3>Multiplication: <span id="resultM"></span></h3>
    <h3>Division: <span id="resultD"></span></h3>
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
    <script src="app.js"></script>
  </body>
</html>
//////////////////////////////////////////////////////////

31. update 
app.js

const contractAddress = "0xc337939187E2C9BCb56D1e0cCE8a8b578E7E1Cc5"; // Replace with your deployed contract address
const contractABI = [
    {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "a",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "b",
            "type": "uint256"
          }
        ],
        "name": "add",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "a",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "b",
            "type": "uint256"
          }
        ],
        "name": "sub",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "a",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "b",
            "type": "uint256"
          }
        ],
        "name": "mul",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "a",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "b",
            "type": "uint256"
          }
        ],
        "name": "div",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      }
]; // Use ABI from compiled contract
let web3;
let contract;
window.addEventListener("load", async () => {
  if (window.ethereum) {
    web3 = new Web3(window.ethereum);
    await window.ethereum.enable();
  } else {
    console.log("MetaMask not detected. Please install MetaMask.");
  }
  contract = new web3.eth.Contract(contractABI, contractAddress);
});
async function addNumber() {
  const num1 = document.getElementById("num1").value;
  const num2 = document.getElementById("num2").value;
  const accounts = await web3.eth.getAccounts();
  console.log(num1);
  console.log(num2);
  contract.methods
    .add(num1, num2)
    .call({ from: accounts[0] })
    .then((result) => {
      console.log(result);
      document.getElementById("result").innerText = `${result}`;
    });

  async function subNumber() {
    const num1 = document.getElementById("num1").value;
    const num2 = document.getElementById("num2").value;
    const accounts = await web3.eth.getAccounts();
    console.log(num1);
    console.log(num2);
    contract.methods
      .sub(num1, num2)
      .call({ from: accounts[0] })
      .then((result) => {
        console.log(result);
        document.getElementById("resultS").innerText = `${result}`;
      });
  }

  async function mulNumber() {
    const num1 = document.getElementById("num1").value;
    const num2 = document.getElementById("num2").value;
    const accounts = await web3.eth.getAccounts();
    console.log(num1);
    console.log(num2);
    contract.methods
      .mul(num1, num2)
      .call({ from: accounts[0] })
      .then((result) => {
        console.log(result);
        document.getElementById("resultM").innerText = `${result}`;
      });
  }

  async function divNumber() {
    const num1 = document.getElementById("num1").value;
    const num2 = document.getElementById("num2").value;
    const accounts = await web3.eth.getAccounts();
    console.log(num1);
    console.log(num2);
    contract.methods
      .div(num1, num2)
      .call({ from: accounts[0] })
      .then((result) => {
        console.log(result);
        document.getElementById("resultD").innerText = `${result}`;
      });
  }
}

////////////////////////////////////////////////////////////////

32. update 
1_deploy.js
const Operations = artifacts.require("Operations");
module.exports = async function (deployer) {
  await deployer.deploy(Operations);
  const instance = await Operations.deployed();
  console.log("Operations deployed at:", instance.address);
};

/////////////////////////////////////////////////////////////////

33. update 
test.js
const Operations = artifacts.require("Operations");
contract("Operations", () => {
  let operationsInstance;
  before(async () => {
    operationsInstance = await Operations.deployed();
  });
  it("should add two numbers correctly", async () => {
    console.log("Contract Address: ", operationsInstance.address);
    const resultA = await operationsInstance.add(5, 2);
    assert.equal(resultA.toNumber(), 7, "Addition of 5 and 2 should be 7");
  });
  it("should subtract two numbers correctly", async () => {
    console.log("Contract Address: ", operationsInstance.address);
    const resultS = await operationsInstance.sub(5, 2);
    assert.equal(resultS.toNumber(), 3, "Subtraction of 5 and 2 should be 3");
  });
  it("should multiply two numbers correctly", async () => {
    console.log("Contract Address: ", operationsInstance.address);
    const resultM = await operationsInstance.mul(5, 2);
    assert.equal(
      resultM.toNumber(),
      10,
      "Multiplication of 5 and 2 should be 10"
    );
  });
  it("should divide two numbers correctly", async () => {
    console.log("Contract Address: ", operationsInstance.address);
    const resultD = await operationsInstance.div(5, 5);
    assert.equal(resultD.toNumber(), 1, "Division of 5 and 5 should be 1");
  });
});

///////////////////////////////////////////////////////

do this cmd again
20. in cmd -- type -- truffle compile
21. it will create Build folder -- open Operations.json -- look for abi -- copy its array form inputs
22. Open app.js
paste abi -- code into -- CONTRACTabi
23. in cmd -- type -- truffle migrate
24. copy Contract Address -- paste into app.js -- contractAddress = ""
25. in cmd -- type -- truffle test
26. in cmd -- type -- npm start
27. it will open an page to perform addition. -- first give permission to metamask.


 
