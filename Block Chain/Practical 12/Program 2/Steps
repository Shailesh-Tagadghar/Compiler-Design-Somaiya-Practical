Program 2 --  Create a DApp to implement transactions between two accounts

Steps :
type -- truffle init 


1. In Contract folder -- create new file -- 
Transaction.sol

// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;
contract transactions {
    event Transfer(address indexed from, address indexed to, uint256 value);
    function transfers(address payable _to) public payable {
        require(msg.value > 0, "Send some ether");
        _to.transfer(msg.value);
        emit Transfer(msg.sender, _to, msg.value);
    }
    receive() external payable {
        emit Transfer(msg.sender, address(this), msg.value);
    }
}

//////////////////////////////////////////////////////

2. create new folder --
frondend
create two files -- 
index.html


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DApp-3</title>
  </head>
  <body>
    <h1>Blockchain Transactions DApp</h1>
    <h2>Send Ether:</h2>
    <input type="text" id="toAddr" placeholder="To Address" />
    <input type="number" id="amount" placeholder="Amount" />
    <button onclick="send()">Send</button>
    <h2>Check Balance:</h2>
    <button onclick="checkBalance()">Check Balance</button>
    <p>Your Balance is: <span id="bal"></span></p>
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
    <script src="app.js"></script>
  </body>
</html>


app.js

const contractAddress = "0x18Dd153Ee1a4aaD185229420A179D308119952B5"; // Replace with your deployed contract address
const contractABI = [
    {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "stateMutability": "payable",
        "type": "receive",
        "payable": true
      },
      {
        "inputs": [
          {
            "internalType": "address payable",
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "transfers",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function",
        "payable": true
      }
]; // Use ABI from compiled contract
let web3;
let contract;
window.addEventListener("load", async () => {
  if (window.ethereum) {
    web3 = new Web3(window.ethereum);
    await window.ethereum.enable();
  } else {
    console.log("MetaMask not detected. Please install MetaMask.");
  }
  contract = new web3.eth.Contract(contractABI, contractAddress);
});
async function send() {
  const accounts = await web3.eth.getAccounts();
  const amount = web3.utils.toWei(
    document.getElementById("amount").value,
    "ether"
  );
  const toAddress = document.getElementById("toAddr").value;
  const sender = accounts[0];
  console.log("Sender: ", accounts[0]);
  console.log("Receiver: ", toAddress);
  console.log("Amount: ", amount);
  if (amount <= 0) {
    alert("Amount must be greater than 0");
    return;
  } else if (toAddress == "") {
    alert("Please enter receiver address");
    return;
  } else {
    contract.methods
      .transfers(toAddress)
      .send({
        from: sender,
        value: amount,
      })
      .on("transactionHash", (hash) => {
        console.log("Transaction Hash:", hash);
      })
      .on("receipt", (receipt) => {
        console.log("Transaction Receipt:", receipt);
      })
      .on("error", (error) => {
        console.error("Error:", error);
      });
  }
}
async function checkBalance() {
  const accounts = await web3.eth.getAccounts();
  const balance = await web3.eth.getBalance(accounts[0]);
  const balanceInEther = web3.utils.fromWei(balance, "ether");
  document.getElementById("bal").innerText = `${balanceInEther}`;
}


/////////////////////////////////////////////////////////////////

3. In migrations folder
1_deploy.js

const transaction = artifacts.require("transactions");
module.exports = async function (deployer) {
  await deployer.deploy(transaction);
  const instance = await transaction.deployed();
  console.log("Contract deployed at:", instance.address);
};

//////////////////////////////////////////////////

4. type following cmd 

>>>>> truffle compile

open build folder -- open json file -- copy ABI and paste in into app.js

>>>>> truffle migrate

copy address -- paste it into app.js

>>>>> truffle test -- if there is any test

>>>>> npm start
run it
