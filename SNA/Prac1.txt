Write a program to compute the following for a given a network:
1.	Number of edges
2.	Number of nodes
3.	Degree of node
4.	Node with lowest degree
5.	Adjacency List
6.	Matrix of the graph



!pip install networkx

import networkx as nx
import numpy as np

def compute_graph_properties(graph):
    #Number of edges
    num_edges = graph.number_of_edges()

    #Number of nodes
    num_nodes = graph.number_of_nodes()

    #Degree of each node
    node_degrees = dict(graph.degree())

    #Node with the lowest degree
    min_degree_node = min(node_degrees, key = node_degrees.get)

    #Adjacency list
    adjacency_list = dict(graph.adjacency())

    # Adjacency matrix
    adjacency_matrix = nx.adjacency_matrix(graph).todense()

    return num_edges, num_nodes, node_degrees, min_degree_node, adjacency_list, adjacency_matrix

# Example usage:
# Create a graph (you can replace this with your own graph creation logic)
G = nx.Graph()
G.add_edges_from([(1, 2), (2, 3), (3, 4), (4, 1), (1, 3)])

# Compute graph properties
edges, nodes, degrees, min_degree_node, adj_list, adj_matrix = compute_graph_properties(G)
# Display results
print("Number of edges:", edges)
print("Number of nodes:", nodes)
print("Degree of each node:", degrees)
print("Node with lowest degree:", min_degree_node)
print("Adjacency list:", adj_list)
print("Adjacency matrix:", adj_matrix)
print("Name : Shailesh Tagadghar")
print("Roll No. 34")
